import { ethers } from "ethers"
import * as fs from "fs-extra"
import "dotenv/config"

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8")
    let wallet = ethers.Wallet.fromEncryptedJsonSync(
        encryptedJson,
        process.env.PRIVATE_KEY_PASSWORD!
    )
    wallet = await wallet.connect(provider)
    //const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

    const abiOracle = fs.readFileSync(
        "./bin/PriceOracle_sol_PriceOracle.abi",
        "utf-8"
    )
    const binOracle = fs.readFileSync(
        "./bin/PriceOracle_sol_PriceOracle.bin",
        "utf-8"
    )

    const oracleFactory = new ethers.ContractFactory(
        abiOracle,
        binOracle,
        wallet
    )
    console.log("Deploying Oracle, please wait...")
    const oracleContract = await oracleFactory.deploy()
    console.log(oracleContract)
    console.log("Tx deployment: ")
    console.log(oracleContract.deployTransaction)
    const oracleTxReceipt = await oracleContract.deployTransaction.wait(1)
    console.log("Tx receipt: ")
    console.log(oracleTxReceipt)

    // console.log("Let's deploy with only tx data");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 6721975,
    //   to: null,
    //   value: 0,
    //   data: "0x610802610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806398d5fdca14610050578063a3053e2a1461006e578063c086381e1461009e575b600080fd5b6100586100ce565b60405161006591906102be565b60405180910390f35b6100886004803603810190610083919061030a565b610244565b60405161009591906102be565b60405180910390f35b6100b860048036038101906100b3919061030a565b61026b565b6040516100c591906102be565b60405180910390f35b60008073d4a33860578de61dbabdc8bfdb98fd742fa7028e905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101599190610370565b905060008160ff16116101a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019890610420565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021291906104cd565b5050509150508160126102259190610577565b600161023191906106df565b8161023c919061072a565b935050505090565b60008061024f6100ce565b90506000818461025f919061079b565b90508092505050919050565b6000806102766100ce565b90506000670de0b6b3a7640000828561028f919061072a565b610299919061079b565b90508092505050919050565b6000819050919050565b6102b8816102a5565b82525050565b60006020820190506102d360008301846102af565b92915050565b600080fd5b6102e7816102a5565b81146102f257600080fd5b50565b600081359050610304816102de565b92915050565b6000602082840312156103205761031f6102d9565b5b600061032e848285016102f5565b91505092915050565b600060ff82169050919050565b61034d81610337565b811461035857600080fd5b50565b60008151905061036a81610344565b92915050565b600060208284031215610386576103856102d9565b5b60006103948482850161035b565b91505092915050565b600082825260208201905092915050565b7f416441756374696f6e3a3a67657450726963653a20646563696d616c7320696e60008201527f20746865207072696365206f7261636c65206172652077726f6e670000000000602082015250565b600061040a603b8361039d565b9150610415826103ae565b604082019050919050565b60006020820190508181036000830152610439816103fd565b9050919050565b600069ffffffffffffffffffff82169050919050565b61045f81610440565b811461046a57600080fd5b50565b60008151905061047c81610456565b92915050565b6000819050919050565b61049581610482565b81146104a057600080fd5b50565b6000815190506104b28161048c565b92915050565b6000815190506104c7816102de565b92915050565b600080600080600060a086880312156104e9576104e86102d9565b5b60006104f78882890161046d565b9550506020610508888289016104a3565b9450506040610519888289016104b8565b935050606061052a888289016104b8565b925050608061053b8882890161046d565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061058282610337565b915061058d83610337565b9250828203905060ff8111156105a6576105a5610548565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115610603578086048111156105df576105de610548565b5b60018516156105ee5780820291505b80810290506105fc856105ac565b94506105c3565b94509492505050565b60008261061c57600190506106d8565b8161062a57600090506106d8565b8160018114610640576002811461064a57610679565b60019150506106d8565b60ff84111561065c5761065b610548565b5b8360020a91508482111561067357610672610548565b5b506106d8565b5060208310610133831016604e8410600b84101617156106ae5782820a9050838111156106a9576106a8610548565b5b6106d8565b6106bb84848460016105b9565b925090508184048111156106d2576106d1610548565b5b81810290505b9392505050565b60006106ea826102a5565b91506106f583610337565b92506107227fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461060c565b905092915050565b6000610735826102a5565b9150610740836102a5565b925082820261074e816102a5565b9150828204841483151761076557610764610548565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107a6826102a5565b91506107b1836102a5565b9250826107c1576107c061076c565b5b82820490509291505056fea2646970667358221220f6796a2673aa88a847728939e6e1b73e0ef59535ce82fffb392969395c884cbe64736f6c63430008110033",
    //   chainId: 1337,
    // };

    // const sentTxResponse = await wallet.sendTransaction(tx);
    // const txReceipt = await sentTxResponse.wait(1);
    // console.log("Raw transaction response");
    // console.log(sentTxResponse);
    // console.log("transaction receipt");
    // console.log(txReceipt);

    // const abi = fs.readFileSync("./bin/AdAuction_sol_AdAuction.abi", "utf-8");
    // const binary = fs.readFileSync("./bin/AdAuction_sol_AdAuction.bin", "utf-8");

    // const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    // console.log("Deploying Auction, please wait...");
    // const contract = await contractFactory.deploy();
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
